#include <iostream>
#include <vector>
#include <cmath>
#include <ctime>
#include <fstream>
#include <iomanip>
#include <limits> 


const int MAX_ARRAY_SIZE = 15;
const std::string OUTPUT_FILENAME = "F.txt";

// Function Prototypes
double calculateTerm(double x, int n);
int generateArray(double x, double epsilon, std::vector<double>& a);
double calculateElapsedTime(clock_t start, clock_t end);
void printArray(const std::vector<double>& a);
void printElapsedTime(double elapsed_time);
void printArrayToFile(const std::vector<double>& a);
int getUserInputs(double& x, double& epsilon);
int processData(double x, double epsilon, std::vector<double>& result_array);

// Main
int main() {
    // Variable declarations
    double x_value;
    double epsilon_value;
    std::vector<double> generated_array;
    clock_t start_time, end_time;
    double elapsed_time;

    if (getUserInputs(x_value, epsilon_value) != 0) {
        return 1; // Exit if input is invalid
    }

    start_time = clock();
    int array_length = processData(x_value, epsilon_value, generated_array);
    end_time = clock();
    elapsed_time = calculateElapsedTime(start_time, end_time);

    if (array_length > 0) {
        printArray(generated_array);
        printElapsedTime(elapsed_time);
        printArrayToFile(generated_array);
    }

    return 0;
}

// Functions
double calculateTerm(double x, int n) {
    if (n == 0) {
        return 1.0;
    } else {
        double numerator = std::pow(x, 2.0 * n);
        double denominator = 1.0;
        for (int i = 1; i <= 2 * n; ++i) {
            denominator *= i;
        }
        if (n % 2 == 0) {
            return numerator / denominator;
        } else {
            return -numerator / denominator;
        }
    }
}

int generateArray(double x, double epsilon, std::vector<double>& a) {
    if (a.empty()) {
        a.push_back(1.0);
        return generateArray(x, epsilon, a);
    } else if (a.size() >= MAX_ARRAY_SIZE) {
        return a.size();
    } else {
        double next_term = calculateTerm(x, a.size());
        if (std::fabs(next_term - a.back()) <= epsilon) {
            return a.size() + 1;
        } else {
            a.push_back(next_term);
            return generateArray(x, epsilon, a);
        }
    }
}

double calculateElapsedTime(clock_t start, clock_t end) {
    return static_cast<double>(end - start) / CLOCKS_PER_SEC;
}

void printArray(const std::vector<double>& a) {
    std::cout << "Massiivi elementide arv: " << a.size() << std::endl;
    for (size_t i = 0; i < a.size(); ++i) {
        std::cout << "A[" << i << "] = " << std::fixed << std::setprecision(6) << a[i] << std::endl;
    }
}

void printElapsedTime(double elapsed_time) {
    std::cout << "Töö teostamiseks kulus " << std::fixed << std::setprecision(6) << elapsed_time << " sekundit." << std::endl;
}

void printArrayToFile(const std::vector<double>& a) {
    std::ofstream file(OUTPUT_FILENAME);
    if (file.is_open()) {
        file << "Massiivi elementide arv: " << a.size() << std::endl;
        for (size_t i = 0; i < a.size(); ++i) {
            file << "A[" << i << "] = " << std::fixed << std::setprecision(6) << a[i] << std::endl;
        }
        file.close();
        std::cout << "Massiiv on kirjutatud faili " << OUTPUT_FILENAME << std::endl;
    } else {
        std::cerr << "Viga: faili avamine ebaõnnestus." << std::endl;
    }
}

int getUserInputs(double& x, double& epsilon) {
    std::cout << "Sisesta X (|X| < 1): ";
    if (!(std::cin >> x)) {
        std::cerr << "Viga: X peab olema reaalarv." << std::endl;
        std::cin.clear();
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        return 1;
    }
    if (std::fabs(x) >= 1) {
        std::cerr << "Viga: |X| peab olema väiksem kui 1." << std::endl;
        return 1;
    }

    std::cout << "Sisesta epsilon (0 < epsilon < 1): ";
    if (!(std::cin >> epsilon)) {
        std::cerr << "Viga: epsilon peab olema reaalarv." << std::endl;
        std::cin.clear();
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        return 1;
    }
    if (epsilon <= 0 || epsilon >= 1) {
        std::cerr << "Viga: epsilon peab olema vahemikus (0, 1)." << std::endl;
        return 1;
    }
    return 0;
}

int processData(double x, double epsilon, std::vector<double>& result_array) {
    return generateArray(x, epsilon, result_array);
}
